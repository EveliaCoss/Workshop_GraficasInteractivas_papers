library(plotly)    # Graficas interactivas
library(viridis)   # Paleta de colores
library(hrbrthemes) # Otros temas
install.packages("hrbrthemes")
library(tidyverse) # Manipulacion, limpieza y visualizacion de datos
library(gapminder) # Base de datos
library(DT)        # Tablas bonitas
library(plotly)    # Graficas interactivas
library(viridis)   # Paleta de colores
library(hrbrthemes) # Otros temas
data <- gapminder %>%
filter(year=="2007") %>% # seleccionar solo 2007
dplyr::select(-year) # Eliminar la columna de year
plot1 <- data %>%
filter(year==2007) %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
theme_bw()
head(data)
plot1 <- data %>%
ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) +
geom_point() +
theme_bw()
# Visualizar en interactiva
ggplotly(plot1)
# Seleccion de datos
plot2_df <- data %>%
# Cambiar formatos
mutate(gdpPercap = round(gdpPercap,0)) %>% # Eliminar decimales
mutate(pop = round(pop/1000000,2)) %>% # Dejar en milones con dos decimas
mutate(lifeExp = round(lifeExp,1)) %>% # dejar a una decimal
# Eeordenar esferas por pop
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# prepare text for tooltip
mutate(text = paste("Country: ", country, "\nPopulation (M): ",
pop, "\nLife Expectancy: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep=""))
head(plot2_df)
plot2_df <- data %>%
# Cambiar formatos
mutate(gdpPercap = round(gdpPercap,0)) %>% # Eliminar decimales
mutate(pop = round(pop/1000000,2)) %>% # Dejar en milones con dos decimas
mutate(lifeExp = round(lifeExp,1)) %>% # dejar a una decimal
# Eeordenar esferas por pop
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# Preparar etiquetas (tooltip)
mutate(text = paste("Pais: ", country, "\nPoblación (M): ",
pop, "\nEsperanza de vida: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep=""))
# Classic ggplot
plot2 <- plot2_df %>%
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Población (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
ggplotly(plot1)
plot1
# Seleccion de datos
plot2_df <- data %>%
# Cambiar formatos
mutate(gdpPercap = round(gdpPercap,0)) %>% # Eliminar decimales
mutate(pop = round(pop/1000000,2)) %>% # Dejar en milones con dos decimas
mutate(lifeExp = round(lifeExp,1)) %>% # dejar a una decimal
# Eeordenar esferas por pop
arrange(desc(pop)) %>%
mutate(country = factor(country, country)) %>%
# Preparar etiquetas (tooltip)
mutate(text = paste("Pais: ", country, "\nPoblación (M): ",
pop, "\nEsperanza de vida: ", lifeExp, "\nGdp per capita: ", gdpPercap, sep=""))
# Grafica basica
plot2 <- plot2_df %>%
ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) +
geom_point(alpha=0.7) +
scale_size(range = c(1.4, 19), name="Población (M)") +
scale_color_viridis(discrete=TRUE, guide=FALSE) +
theme_ipsum() +
theme(legend.position="none")
plot2
# Convertir a plot interactivo
pp <- ggplotly(p, tooltip="text")
pp
# save the widget
# library(htmlwidgets)
# saveWidget(pp, file=paste0( getwd(), "/HtmlWidget/ggplotlyBubblechart.html"))
plot2
# Convertir a plot interactivo
ggplotly(plot2, tooltip="text")
# Convertir a plot interactivo
plot2_interactive <- ggplotly(plot2, tooltip="text")
plot2_interactive
plot2_interactive
library(htmlwidgets)
library(htmlwidgets)
saveWidget(plot2_interactive, file=paste0("figures/ggplotlyBubblechart.html"))
getwd()
saveWidget(plot2_interactive, file="figures/ggplotlyBubblechart.html")
saveWidget(plot2_interactive, file="figures/ggplotlyBubblechart.html")
getwd()
dir()
library(htmlwidgets)
saveWidget(plot2_interactive, file= "graphs/ggplotlyBubblechart.html")
plot3 <- gapminder %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
)
plot3
plot3_interactive <- plot3 %>% layout(
xaxis = list(
type = "log"  # Escala logarítmica en el eje X
)
)
# Visualizar el gráfico
plot3_interactive
plot3 <- gapminder %>%
plot_ly(
x = ~gdpPercap,         # Eje X: PIB per cápita
y = ~lifeExp,           # Eje Y: Esperanza de vida
size = ~pop,            # Tamaño de burbuja: Población
color = ~continent,     # Color: Continente
frame = ~year,          # Fotograma para animación: Año
text = ~country,        # Texto al pasar el cursor: Nombre del país
hoverinfo = "text",     # Muestra solo el texto personalizado
type = 'scatter',       # Tipo de gráfico: Dispersión
mode = 'markers'        # Solo marcadores (sin líneas)
)
plot3_interactive <- plot3 %>% layout(
xaxis = list(
type = "log"  # Escala logarítmica en el eje X
)
)
# Visualizar el gráfico
plot3_interactive
plot2_interactive <- ggplotly(plot2, tooltip="text")
plot2_interactive
library(ggplot2)
library(ggiraph)
library(patchwork)
# Example data - replace with your data
map_data <- data.frame(
id = 1:3,
lat = c(40, 42, 37),
lon = c(-100, -120, -95),
group = c("A", "B", "C")
)
line_data <- data.frame(
id = rep(1:3, each = 10),
time = rep(seq(as.Date("2021-01-01"), by = "1 month", length.out = 10), 3),
value = rnorm(30),
group = rep(c("A", "B", "C"), each = 10)
)
# Map with interactive points
map_plot <- ggplot() +
borders("world", colour = "gray80", fill = "gray90") +  # Add a world map background
geom_point_interactive(data = map_data, aes(x = lon, y = lat, size = 5, color=group, tooltip = group, data_id = group)) +
theme_minimal() +
theme(legend.position = "none") +
coord_sf(xlim = c(-130, -65), ylim = c(10, 75))
# Line chart with interactive lines
line_plot <- ggplot(line_data, aes(x = time, y = value, group = group, color=group)) +
geom_line_interactive(aes(data_id = group, tooltip = group))
combined_plot <- girafe(
ggobj = map_plot + plot_spacer() + line_plot + plot_layout(widths = c(0.35, 0, 0.65)),
options = list(
opts_hover(css = ''),
opts_hover_inv(css = "opacity:0.1;"),
opts_sizing(rescale = FALSE)
),
height_svg = 4,
width_svg = 12
)
# Read the full world map
world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
library(tidyverse)
library(ggiraph)
library(patchwork)
library(tidyverse)
library(ggiraph)
library(patchwork)
library(sf) # install.packages('sf')
library(tidyverse)
library(ggiraph)
library(patchwork)
library(sf) # install.packages('sf')
# Example data - replace with your data
map_data <- data.frame(
id = 1:3,
lat = c(40, 42, 37),
lon = c(-100, -120, -95),
group = c("A", "B", "C")
)
line_data <- data.frame(
id = rep(1:3, each = 10),
time = rep(seq(as.Date("2021-01-01"), by = "1 month", length.out = 10), 3),
value = rnorm(30),
group = rep(c("A", "B", "C"), each = 10)
)
# Map with interactive points
map_plot <- ggplot() +
borders("world", colour = "gray80", fill = "gray90") +  # Add a world map background
geom_point_interactive(data = map_data, aes(x = lon, y = lat, size = 5, color=group, tooltip = group, data_id = group)) +
theme_minimal() +
theme(legend.position = "none") +
coord_sf(xlim = c(-130, -65), ylim = c(10, 75))
# Line chart with interactive lines
line_plot <- ggplot(line_data, aes(x = time, y = value, group = group, color=group)) +
geom_line_interactive(aes(data_id = group, tooltip = group))
combined_plot <- girafe(
ggobj = map_plot + plot_spacer() + line_plot + plot_layout(widths = c(0.35, 0, 0.65)),
options = list(
opts_hover(css = ''),
opts_hover_inv(css = "opacity:0.1;"),
opts_sizing(rescale = FALSE)
),
height_svg = 4,
width_svg = 12
)
# Read the full world map
world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
world_sf <- world_sf %>%
filter(!name %in% c("Antarctica", "Greenland"))
# Create a sample dataset
happiness_data <- data.frame(
Country = c(
"France", "Germany", "United Kingdom",
"Japan", "China", "Vietnam",
"United States of America", "Canada", "Mexico"
),
Continent = c(
"Europe", "Europe", "Europe",
"Asia", "Asia", "Asia",
"North America", "North America", "North America"
),
Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),
GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),
Social_support = rnorm(mean = 30, sd = 20, n = 9),
Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)
)
# Join the happiness data with the full world map
world_sf <- world_sf %>%
left_join(happiness_data, by = c("name" = "Country"))
# Create the first chart (Scatter plot)
p1 <- ggplot(world_sf, aes(
GDP_per_capita,
Happiness_Score,
tooltip = name,
data_id = Continent,
color = Continent
)) +
geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the second chart (Bar plot)
p2 <- ggplot(world_sf, aes(
x = reorder(name, Happiness_Score),
y = Happiness_Score,
tooltip = name,
data_id = Continent,
fill = Continent
)) +
geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the third chart (choropleth)
# Create the third chart (choropleth)
p3 <- ggplot() +
geom_sf(data = world_sf, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = filter(world_sf, !is.na(Happiness_Score)),
aes(fill = Continent, tooltip = name, data_id = Continent)
) +
coord_sf(crs = st_crs(3857)) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Combine the plots
combined_plot <- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))
# Create the interactive plot
interactive_plot <- girafe(ggobj = combined_plot)
interactive_plot <- girafe_options(
i
interactive_plot
# Read the full world map
world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
world_sf <- world_sf %>%
filter(!name %in% c("Antarctica", "Greenland"))
# Create a sample dataset
happiness_data <- data.frame(
Country = c(
"France", "Germany", "United Kingdom",
"Japan", "China", "Vietnam",
"United States of America", "Canada", "Mexico"
),
Continent = c(
"Europe", "Europe", "Europe",
"Asia", "Asia", "Asia",
"North America", "North America", "North America"
),
Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),
GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),
Social_support = rnorm(mean = 30, sd = 20, n = 9),
Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)
)
# Join the happiness data with the full world map
world_sf <- world_sf %>%
left_join(happiness_data, by = c("name" = "Country"))
# Create the first chart (Scatter plot)
p1 <- ggplot(world_sf, aes(
GDP_per_capita,
Happiness_Score,
tooltip = name,
data_id = Continent,
color = Continent
)) +
geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the second chart (Bar plot)
p2 <- ggplot(world_sf, aes(
x = reorder(name, Happiness_Score),
y = Happiness_Score,
tooltip = name,
data_id = Continent,
fill = Continent
)) +
geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the third chart (choropleth)
# Create the third chart (choropleth)
p3 <- ggplot() +
geom_sf(data = world_sf, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = filter(world_sf, !is.na(Happiness_Score)),
aes(fill = Continent, tooltip = name, data_id = Continent)
) +
coord_sf(crs = st_crs(3857)) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Combine the plots
combined_plot <- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))
# Create CSS
tooltip_css <- "
border-radius: 12px;
color: #333;
background-color: white;
padding: 10px;
font-size: 14px;
transition: all 0.5s ease-out;
"
hover_css <- "
filter: brightness(75%);
cursor: pointer;
transition: all 0.5s ease-out;
filter: brightness(1.15);
"
# Add interactivity
interactive_plot <- interactive_plot %>%
girafe_options(
opts_hover(css = hover_css),
opts_tooltip(css = tooltip_css),
opts_hover_inv(css = "opacity:0.3; transition: all 0.2s ease-out;")
)
interactive_plot
interactive_plot
# Add interactivity
interactive_plot <- combined_plot %>%
girafe_options(
opts_hover(css = hover_css),
opts_tooltip(css = tooltip_css),
opts_hover_inv(css = "opacity:0.3; transition: all 0.2s ease-out;")
)
# Read the full world map
world_sf <- read_sf("https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/world.geojson")
world_sf <- world_sf %>%
filter(!name %in% c("Antarctica", "Greenland"))
# Create a sample dataset
happiness_data <- data.frame(
Country = c(
"France", "Germany", "United Kingdom",
"Japan", "China", "Vietnam",
"United States of America", "Canada", "Mexico"
),
Continent = c(
"Europe", "Europe", "Europe",
"Asia", "Asia", "Asia",
"North America", "North America", "North America"
),
Happiness_Score = rnorm(mean = 30, sd = 20, n = 9),
GDP_per_capita = rnorm(mean = 30, sd = 20, n = 9),
Social_support = rnorm(mean = 30, sd = 20, n = 9),
Healthy_life_expectancy = rnorm(mean = 30, sd = 20, n = 9)
)
# Join the happiness data with the full world map
world_sf <- world_sf %>%
left_join(happiness_data, by = c("name" = "Country"))
# Create the first chart (Scatter plot)
p1 <- ggplot(world_sf, aes(
GDP_per_capita,
Happiness_Score,
tooltip = name,
data_id = Continent,
color = Continent
)) +
geom_point_interactive(data = filter(world_sf, !is.na(Happiness_Score)), size = 4) +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the second chart (Bar plot)
p2 <- ggplot(world_sf, aes(
x = reorder(name, Happiness_Score),
y = Happiness_Score,
tooltip = name,
data_id = Continent,
fill = Continent
)) +
geom_col_interactive(data = filter(world_sf, !is.na(Happiness_Score))) +
coord_flip() +
theme_minimal() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Create the third chart (choropleth)
# Create the third chart (choropleth)
p3 <- ggplot() +
geom_sf(data = world_sf, fill = "lightgrey", color = "lightgrey") +
geom_sf_interactive(
data = filter(world_sf, !is.na(Happiness_Score)),
aes(fill = Continent, tooltip = name, data_id = Continent)
) +
coord_sf(crs = st_crs(3857)) +
theme_void() +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "none"
)
# Combine the plots
combined_plot <- (p1 + p2) / p3 + plot_layout(heights = c(1, 2))
# Create CSS
tooltip_css <- "
border-radius: 12px;
color: #333;
background-color: white;
padding: 10px;
font-size: 14px;
transition: all 0.5s ease-out;
"
hover_css <- "
filter: brightness(75%);
cursor: pointer;
transition: all 0.5s ease-out;
filter: brightness(1.15);
"
# Add interactivity
interactive_plot <- combined_plot %>%
girafe_options(
opts_hover(css = hover_css),
opts_tooltip(css = tooltip_css),
opts_hover_inv(css = "opacity:0.3; transition: all 0.2s ease-out;")
)
# Create the interactive plot
# Add interactivity
interactive_plot <- girafe(ggobj = combined_plot)
interactive_plot <- interactive_plot %>%
girafe_options(
opts_hover(css = hover_css),
opts_tooltip(css = tooltip_css),
opts_hover_inv(css = "opacity:0.3; transition: all 0.2s ease-out;")
)
interactive_plot
library("ggpubr")
library("ggpubr")
